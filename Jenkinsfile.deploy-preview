def label = "wordsmith-front-${UUID.randomUUID().toString()}"
podTemplate(label: label, yaml: """
apiVersion: v1
kind: Pod
spec:
    containers:
    - name: jnlp
    - name: helm
      image: devth/helm:v2.10.0
      command:
      - cat
      tty: true
    - name: kubectl
      image: lachlanevenson/k8s-kubectl:v1.10.7
      command:
      - cat
      tty: true
    - name: curl
      image: appropriate/curl
      command:
      - cat
      tty: true
"""
    ) {
  echo 'Version broken : 20180912.1156'
  echo 'Version NOT broken : 20180912.1205'
  userInput = input message: 'Application Version', ok: 'Deploy', parameters: [string(description: 'Wordsmith FRONT Helm Chart Version', name: 'Wordsmith Front Version', trim: true)], submitterParameter: 'submitter'
  APPLICATION_VERSION = userInput['Wordsmith Front Version']
  echo("application version: $APPLICATION_VERSION")
  node (label) {
    stage('Deploy to Preview Environment') {
        container('helm') {
          APP_HOST = 'front.preview.wordsmith.beescloud.com'

          sh """

             helm init --client-only
             helm repo add wordsmith http://chartmuseum-chartmuseum.core.svc.cluster.local:8080
             helm repo update

             helm fetch wordsmith/wordsmith-front --version "${APPLICATION_VERSION}"
             helm upgrade wordsmith-front-preview wordsmith/wordsmith-front --version "${APPLICATION_VERSION}" --install --namespace preview --wait \
                --set ingress.hosts[0]=${APP_HOST},api.url=api.preview.wordsmith.beescloud.com,image.pullPolicy=Always
            """

        } // container
        container('kubectl') {
          sh """
            kubectl describe deployment wordsmith-front-preview --namespace preview
            kubectl get ingress wordsmith-front-preview --namespace preview
          """
        } // container
        container('curl') {
          script {
            APPLICATION_CODE = sh (script: "curl --write-out %{http_code} --silent --output /dev/null https://front.preview.wordsmith.beescloud.com/version",
              returnStdout: true
            ).trim()

            // Let's retry multiple times if return code is not 200
            if (APPLICATION_CODE != "200") {
              retry(3) {
                sleep(5)
                APPLICATION_CODE = sh (
                  script: "curl --write-out %{http_code} --silent --output /dev/null https://front.preview.wordsmith.beescloud.com/version",
                  returnStdout: true
                ).trim()
              }
            }
            // Raise an exception if application does not respond HTTP code 200 on /version
            if (APPLICATION_CODE != "200") { 
              def deploymentIssue = [fields: [
                               project: [key: 'WOR'],
                               summary: "Deployment failure: ${APPLICATION_VERSION}",
                               description: "Please go to ${BUILD_URL} and verify the deployment logs",
                               issuetype: [name: 'Bug']]]

                  jiraResponse = jiraNewIssue issue: deploymentIssue
              echo "https://jira.beescloud.com/projects/WOR/issues/${jiraResponse.data.key}"
              error('An error occured during the deployment, application is not responding after the deployment')
              throw new Exception("Deployment failed, application is not responding on /version")
            } else {
              echo 'Deployment was successful'
            }
          }
        }
    } // stage
  } // node
} // podTemplate
